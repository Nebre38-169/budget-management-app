@use "sass:color";

@import "./../Base/colors";


input {
    width: 100%;
    height: 40px;

    background-color: map-get($map: $custom-colors, $key: primary);
    border: #000000;
    color:  map-get($map: $custom-colors, $key: lighter-dark);

    border-radius: 10px;
    padding: 5px 5px 5px 5px;
}

input[type="checkbox"] {
    /* Add if not using autoprefixer */
    -webkit-appearance: none;
    /* Remove most all native input styles */
    appearance: none;
    /* Not removed via appearance */
    margin: 0;

    font: inherit;
    color:map-get($custom-colors,secondary);
    width: 1.5em;
    height: 1.5em;
    border-radius: 0.15em;

    display: grid;
    place-content: center;
}

input[type="checkbox"]::before {
    content: "";
    width: 1em;
    height: 1em;
    background-color: map-get($custom-colors,secondary) !important;
    clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
    transform: scale(0);
    transform-origin: bottom left;
    transition: 120ms transform ease-in-out;
    box-shadow: inset 1em 1em map-get($map: $custom-colors, $key: shadow);
    /* Windows High Contrast Mode */
    background-color: CanvasText;
}

input[type="checkbox"]:checked::before {
    transform: scale(1);
}

input[type="checkbox"]:focus {
    outline: max(2px, 0.15em) solid currentColor;
    outline-offset: max(2px, 0.15em);
}

input[type="checkbox"]:disabled {
    --form-control-color: var(--form-control-disabled);

    color: map-get($map: $custom-colors, $key: shadow);
    cursor: not-allowed;
}

.modal-input {
    width: 100%;
    border: none;
    border-radius: 0px;
}

.modal-input:focus{
    border: none;
    border-radius: 0px;
}


.input-field{
    height: auto;
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    padding: 0px 10px 0px 10px;
}

.input-field.checkbox{
    display: flex;
    flex-direction: row;
    justify-content: start;
    align-items: center;
    height: 25px;
}

::-webkit-calendar-picker-indicator {
    filter: invert(1);
}

.btn{
    border-radius: 10px;
    font-size: 16px;
    font-weight: 600;
    height : 40px;
}

.floating-btn{
    position: absolute;
    height: 40px;
    width: 40px;
    border-radius: 20px;
    margin: 0px;
    padding: 0px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    transition: all ease-in-out 200ms;
}

.floating-btn.main{
    z-index: 1;
}

.floating-btn.rotate{
    transform: rotate(90deg);
}

$raise-value : (40px,90px,140px,190px,240px);

.floating-btn.bottom{
    bottom: 40px;
}

@for $i from 1 through length($raise-value) {
    $v: nth($raise-value, $i);
    .floating-btn.bottom.raise:nth-of-type(#{$i}){
        bottom: $v;
    }
}

.floating-btn.rigth{
    right: 20px;
}

.floating-btn > .icon{
    height: 95%;
    width: 95%;
}

@each $color in $colors-name {
    .btn-#{$color}{
        background-color: map-get($map: $custom-colors, $key: $color);
    }

    .btn-#{$color}:active{
        $c : map-get($map: $custom-colors, $key: $color);
        @if(color.blackness($c)>50%) {
            background-color: lighten($c,15%);
        } @else {
            background-color: darken($c,15%);
        }
    }

    .btn-#{$color}:disabled{
        $c : map-get($map: $custom-colors, $key: $color);
        background-color: darken($color: $c, $amount: 20%);
    }
}
